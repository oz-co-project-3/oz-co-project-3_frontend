name: Deploy to NCP Server (EC2) with Docker

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 빌드 캐싱 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # NCP 로그인
      - name: Login to NCP
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      # 환경 변수 파일 생성 (필요한 경우)
      # - name: Create .env file
      #   run: |
      #     echo "NAVER_MAP_API_KEY=${{ secrets.NAVER_MAP_API_KEY }}" >> .env
      #     echo "OTHER_ENV_VAR=${{ secrets.OTHER_ENV_VAR }}" >> .env

      # Docker Compose를 사용하여 빌드 및 푸시
      - name: Build and push with Docker Compose
        run: |
          docker compose build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg PLATFORM=linux/amd64
          docker tag next-app-dev oz-co-frontend-dev.kr.ncr.ntruss.com/next-app-dev:latest
          docker compose push

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and Push Docker Image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     file: ./Dockerfile.dev
      #     #          file: Dockerfile.prod # 배포
      #     push: true
      #     tags: hak2881/senior:latest
      #     no-cache: true

      - name: Deploy to NCP via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: 175.45.205.244
          username: root
          key: ${{ secrets.NCP_SSH_KEY }}
          script: |
            docker system prune -af
            cd app
            docker compose -f docker-compose-front-dev.yml pull

#            docker-compose -f docker-compose.dev.yml down
#            docker-compose -f docker-compose.dev.yml up -d

#            docker-compose -f docker-compose.prod.yml down
#            docker-compose -f docker-compose.prod.yml up -d
