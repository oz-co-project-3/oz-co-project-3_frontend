name: Deploy to NCP Server with Docker (Dev)

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Set environment variables (GitHub Actions 환경변수 설정)
      #   run: |
      #     echo "NEXT_PUBLIC_BASE_URL=${{ secrets.BASE_URL }}" >> $GITHUB_ENV

      # 빌드 캐싱 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # 환경 변수 파일 생성 (필요한 경우)
      # - name: Create .env file
      #   run: |
      #     echo "NAVER_MAP_API_KEY=${{ secrets.NAVER_MAP_API_KEY }}" >> .env
      #     echo "OTHER_ENV_VAR=${{ secrets.OTHER_ENV_VAR }}" >> .env

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: nagi2/oz-co-front-dev:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          # 필요하다면 환경 변수 추가 (Dockerfile에서 받아서 설정하기) (어차피 이미지에 포함)
          # build-args: |
          #   NEXT_PUBLIC_INTERNAL_BASE_URL=${{ secrets.NEXT_PUBLIC_INTERNAL_BASE_URL }}

      # 캐시 최적화 (선택사항)
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      # EC2 서버로 이미지 받아와서 프론트엔드 컨테이너만 빌드 후 재시작
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # .env 파일 생성
            cat > .env << EOL
            NEXT_PUBLIC_INTERNAL_BASE_URL=${{ secrets.NEXT_PUBLIC_INTERNAL_BASE_URL }}
            NEXT_PUBLIC_EXTERNAL_BASE_URL=${{ secrets.NEXT_PUBLIC_EXTERNAL_BASE_URL }}
            NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }}
            # NEXT_PUBLIC_NAVER_MAP_KEY=${{ secrets.NEXT_PUBLIC_NAVER_MAP_KEY }}
            EOL

            cd app
            sudo docker pull nagi2/oz-co-front-dev:latest
            sudo docker tag nagi2/oz-co-front-dev:latest next-app-dev:latest
            sudo docker image rm nagi2/oz-co-front-dev:latest
            sudo docker compose -f docker-compose.dev.yml down
            sudo docker compose -f docker-compose.dev.yml up -d
            sudo docker system prune -f
