name: Deploy to NCP Server with Docker (Prod)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    #
    # steps:
    #   - name: Checkout Repository
    #     uses: actions/checkout@v4

    #   # 빌드 캐싱 설정
    #   - name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v3

    #   - name: Cache Docker layers
    #     uses: actions/cache@v3
    #     with:
    #       path: /tmp/.buildx-cache
    #       key: ${{ runner.os }}-buildx-${{ github.sha }}
    #       restore-keys: |
    #         ${{ runner.os }}-buildx-

    #   # NCP 로그인
    #   - name: Login to NCP
    #     uses: docker/login-action@v3
    #     with:
    #       registry: ${{ secrets.CONTAINER_REGISTRY_URL }}
    #       username: ${{ secrets.NCP_ACCESS_KEY }}
    #       password: ${{ secrets.NCP_SECRET_KEY }}

    #   # 환경 변수 파일 생성 (필요한 경우)
    #   # - name: Create .env file
    #   #   run: |
    #   #     echo "NAVER_MAP_API_KEY=${{ secrets.NAVER_MAP_API_KEY }}" >> .env
    #   #     echo "OTHER_ENV_VAR=${{ secrets.OTHER_ENV_VAR }}" >> .env

    #   # Docker 이미지 빌드 및 푸시
    #   - name: Build and push Docker image
    #     uses: docker/build-push-action@v6
    #     with:
    #       context: .
    #       file: ./Dockerfile
    #       platforms: linux/amd64
    #       push: true
    #       tags: ${{ secrets.CONTAINER_REGISTRY_URL }}/next-app-prod:latest
    #       cache-from: type=local,src=/tmp/.buildx-cache
    #       cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
    #       # 필요하다면 환경 변수 추가 (Dockerfile에서 받아서 설정하기)
    #       # build-args: |
    #       #   NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

    #   # 캐시 최적화 (선택사항)
    #   - name: Move cache
    #     run: |
    #       rm -rf /tmp/.buildx-cache
    #       mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

    #   # NCP 서버로 이미지 받아와서 프론트엔드 컨테이너만 빌드 후 재시작
    #   - name: Deploy to NCP via SSH
    #     uses: appleboy/ssh-action@v1
    #     with:
    #       host: ${{ secrets.SERVER_IP }}
    #       username: root
    #       key: ${{ secrets.NCP_SSH_KEY }}
    #       script: |
    #         docker system prune -af

    #         # .env 파일 생성
    #         # cat > .env << EOL
    #         # NAVER_MAP_KEY=${{ secrets.NAVER_MAP_KEY }}
    #         # EOL

    #         docker login ${{ secrets.CONTAINER_REGISTRY_URL}} -u ${{ secrets.NCP_ACCESS_KEY }} -p ${{ secrets.NCP_SECRET_KEY }}

    #         docker pull ${{ secrets.CONTAINER_REGISTRY_URL }}/next-app-prod:latest
    #         docker tag ${{ secrets.CONTAINER_REGISTRY_URL }}/next-app-prod:latest next-app-prod:latest

    #         cd app
    #         docker-compose -f docker-compose.prod.yml up -d --no-deps --build frontend-next
